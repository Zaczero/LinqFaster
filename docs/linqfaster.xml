<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinqFasterer</name>
    </assembly>
    <members>
        <member name="T:LinqFasterer.EnumerableF">
            <summary>
            Provides a set of <see langword="static"/> methods for querying objects that implement <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:LinqFasterer.EnumerableF.AggregateF``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies an accumulator function over a sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to aggregate over.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The final accumulator value.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.AggregateF``2(System.Collections.Generic.IList{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to aggregate over.</param>
            <param name="seed">An initial accumulator value.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <returns>The final accumulator value.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.AggregateF``3(System.Collections.Generic.IList{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to aggregate over.</param>
            <param name="seed">An initial accumulator value.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <param name="resultSelector">A selector function to transform the final accumulator value into the result value.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <typeparam name="TResult">The type of the resulting value.</typeparam>
            <returns>The transformed final accumulator value.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.AllF``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Determines whether all elements of a sequence satisfy a condition.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> that contains the elements to apply the predicate to.</param>
            <param name="predicate">A predicate function to test each element for a condition.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns><see langword="true"/> if every element of <paramref name="source"/> passes the test in the specified <paramref name="predicate"/>, or if <paramref name="source"/> is empty; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.AnyF``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Determines whether any element of a sequence satisfies a condition.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> whose elements to apply the predicate to.</param>
            <param name="predicate">An optional predicate function to test each element for a condition; when set to <see langword="null"/>, the function check whether <paramref name="source"/> is empty or not.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns><see langword="true"/> if any element of <paramref name="source"/> passes the test in the specified <paramref name="predicate"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.AppendF``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Appends a value to the end of the sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values.</param>
            <param name="element">A value to append.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that starts with <paramref name="source"/> and ends with <paramref name="element"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.AverageF(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Computes the average of a sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Int32"/> to calculate the average of.</param>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.AverageF(System.Collections.Generic.IList{System.Int64})">
            <summary>
            Computes the average of a sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Int64"/> to calculate the average of.</param>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.AverageF(System.Collections.Generic.IList{System.Single})">
            <summary>
            Computes the average of a sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Single"/> to calculate the average of.</param>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.AverageF(System.Collections.Generic.IList{System.Double})">
            <summary>
            Computes the average of a sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Double"/> to calculate the average of.</param>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.AverageF(System.Collections.Generic.IList{System.Decimal})">
            <summary>
            Computes the average of a sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Decimal"/> to calculate the average of.</param>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.AverageF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes the average of a sequence that is obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.AverageF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the average of a sequence that is obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.AverageF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Single})">
            <summary>
            Computes the average of a sequence that is obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.AverageF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the average of a sequence that is obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.AverageF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes the average of a sequence that is obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The average of the sequence of values.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.ConcatF``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Concatenates two sequences.
            </summary>
            <param name="first">The first <see cref="T:System.Collections.Generic.IList`1"/> to concatenate.</param>
            <param name="second">The second <see cref="T:System.Collections.Generic.IList`1"/> to concatenate.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="first"/> and <paramref name="second"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains the concatenated elements of the two input sequences.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.ContainsF``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether a sequence contains a specified element by using a specified equality comparer.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> in which to locate a value.</param>
            <param name="value">A value to locate.</param>
            <param name="comparer">An optional <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used to compare values; falls back to <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> when set to <see langword="null"/>.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns><see langword="true"/> if <paramref name="source"/> contains an element that has the specified <paramref name="value"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.CountF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns a number that represents how many elements in the specified sequence satisfy a condition.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> that contains elements to be tested and counted.</param>
            <param name="predicate">An optional predicate function to test each element for a condition; when set to <see langword="null"/>, the function returns the current size of <paramref name="source"/>.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>A number that represents how many elements in <paramref name="source"/> satisfy the condition specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.DefaultIfEmptyF``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to return the specified value for if it is empty.</param>
            <param name="defaultValue">The value to return if <paramref name="source"/> is empty.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains <paramref name="defaultValue"/> if <paramref name="source"/> is empty; otherwise, <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.DistinctF``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>
            Returns distinct elements from a sequence by using a specified equality comparer to compare values.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to remove duplicate elements from.</param>
            <param name="comparer">An optional <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used to compare values; falls back to <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> when set to <see langword="null"/>.</param>
            <param name="forceClone">Force clone of <paramref name="source"/> (disable in-place optimization).</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains distinct elements from <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.ElementAtF``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to return an element from.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The element at <paramref name="index"/> in <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.ElementAtOrDefaultF``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence or a default value if the index is out of range.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to return an element from.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns><see langword="default"/> if the index is outside the bounds of <paramref name="source"/>; otherwise, the element at <paramref name="index"/> in <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.EmptyF``1">
            <summary>
            Returns an empty sequence that has the specified type argument.
            </summary>
            <returns>An empty sequence.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.ExceptF``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>
            Produces the set difference of two sequences by using the specified equality comparer to compare values.
            </summary>
            <param name="first">An <see cref="T:System.Collections.Generic.IList`1"/> whose elements that are not also in <paramref name="second"/> will be returned.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IList`1"/> whose elements that also occur in <paramref name="first"/> will cause those elements to be removed from the returned sequence.</param>
            <param name="comparer">An optional <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used to compare values; falls back to <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> when set to <see langword="null"/>.</param>
            <param name="forceClone">Force clone of <paramref name="first"/> (disable in-place optimization).</param>
            <typeparam name="TSource">The type of the elements of <paramref name="first"/> and <paramref name="second"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains the set difference of the elements of the two input sequences.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.FirstF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element in a sequence that satisfies a specified condition.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to return an element from.</param>
            <param name="predicate">An optional predicate function to test each element for a condition; when set to <see langword="null"/> the function returns the first element in <paramref name="source"/>.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The first element in <paramref name="source"/> that passes the test specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.FirstOrDefaultF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to return an element from.</param>
            <param name="predicate">An optional predicate function to test each element for a condition; when set to <see langword="null"/> the function returns the first element in <paramref name="source"/> or <see langword="default"/> when <paramref name="source"/> is empty.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns><see langword="default" /> if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.IntersectF``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>
            Produces the set intersection of two sequences.
            </summary>
            <param name="first">An <see cref="T:System.Collections.Generic.IList`1"/> whose distinct elements that also appear in <paramref name="second"/> will be returned.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IList`1"/> whose distinct elements that also appear in <paramref name="first"/> will be returned.</param>
            <param name="comparer">An optional <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used to compare values; falls back to <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> when set to <see langword="null"/>.</param>
            <param name="forceClone">Force clone of <paramref name="first"/> (disable in-place optimization).</param>
            <typeparam name="TSource">The type of the elements of <paramref name="first"/> and <paramref name="second"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains the elements that form the set intersection of the two input sequences.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.LastF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element in a sequence that satisfies a specified condition.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to return an element from.</param>
            <param name="predicate">An optional predicate function to test each element for a condition; when set to <see langword="null"/> the function returns the last element in <paramref name="source"/>.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The last element in <paramref name="source"/> that passes the test specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.LastOrDefaultF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to return an element from.</param>
            <param name="predicate">An optional predicate function to test each element for a condition; when set to <see langword="null"/> the function returns the last element in <paramref name="source"/> or <see langword="default"/> when <paramref name="source"/> is empty.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns><see langword="default" /> if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the last element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.MaxF``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns the maximum value in a sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values to determine the maximum value of.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.MaxF``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the maximum resulting value.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <returns>The maximum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.MinF``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns the minimum value in a sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values to determine the minimum value of.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.MinF``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the minimum resulting value.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <returns>The minimum value in <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.OrderByF``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Boolean)">
            <summary>
            Sorts the elements of a sequence in ascending order by using a specified comparer.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values to order.</param>
            <param name="keySelector">A selector function to extract a key from an element.</param>
            <param name="comparer">An optional <see cref="T:System.Collections.Generic.IComparer`1"/> used to compare keys; falls back to <see cref="P:System.Collections.Generic.Comparer`1.Default"/> when set to <see langword="null"/>.</param>
            <param name="forceClone">Force clone of <paramref name="source"/> (disable in-place optimization).</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> whose elements are sorted according to a key.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.OrderByDescendingF``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Boolean)">
            <summary>
            Sorts the elements of a sequence in descending order by using a specified comparer.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values to order.</param>
            <param name="keySelector">A selector function to extract a key from an element.</param>
            <param name="comparer">An optional <see cref="T:System.Collections.Generic.IComparer`1"/> used to compare keys; falls back to <see cref="P:System.Collections.Generic.Comparer`1.Default"/> when set to <see langword="null"/>.</param>
            <param name="forceClone">Force clone of <paramref name="source"/> (disable in-place optimization).</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> whose elements are sorted in descending order according to a key.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.PrependF``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Prepends a value to the beginning of the sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values.</param>
            <param name="element">A value to prepend.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that starts with <paramref name="element"/> and ends with <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.RangeF(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a sequence of numbers within a specified range.
            </summary>
            <param name="start">The value of the first number in the sequence.</param>
            <param name="count">A number of sequential numbers to generate.</param>
            <param name="change">A value change between individual elements of an <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Int32"/> that contains a range of sequential numbers.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.RangeF(System.Int64,System.Int32,System.Int64)">
            <summary>
            Generates a sequence of numbers within a specified range.
            </summary>
            <param name="start">The value of the first number in the sequence.</param>
            <param name="count">A number of sequential numbers to generate.</param>
            <param name="change">A value change between individual elements of an <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Int64"/> that contains a range of sequential numbers.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.RangeF(System.Single,System.Int32,System.Single)">
            <summary>
            Generates a sequence of numbers within a specified range.
            </summary>
            <param name="start">The value of the first number in the sequence.</param>
            <param name="count">A number of sequential numbers to generate.</param>
            <param name="change">A value change between individual elements of an <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Single"/> that contains a range of sequential numbers.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.RangeF(System.Double,System.Int32,System.Double)">
            <summary>
            Generates a sequence of numbers within a specified range.
            </summary>
            <param name="start">The value of the first number in the sequence.</param>
            <param name="count">A number of sequential numbers to generate.</param>
            <param name="change">A value change between individual elements of an <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Double"/> that contains a range of sequential numbers.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.RangeF(System.Decimal,System.Int32,System.Decimal)">
            <summary>
            Generates a sequence of numbers within a specified range.
            </summary>
            <param name="start">The value of the first number in the sequence.</param>
            <param name="count">A number of sequential numbers to generate.</param>
            <param name="change">A value change between individual elements of an <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Decimal"/> that contains a range of sequential numbers.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.RepeatF``1(``0,System.Int32)">
            <summary>
            Generates a sequence that contains one repeated value.
            </summary>
            <param name="element">The value to be repeated.</param>
            <param name="count">The number of times to repeat the value in the generated sequence.</param>
            <typeparam name="TResult">The type of the value to be repeated in the result sequence.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains a repeated <paramref name="element"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.RepeatSequenceF``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Generates a sequence that contains one repeated sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to be repeated.</param>
            <param name="count">The number of times to repeat the <paramref name="source"/> in the generated sequence.</param>
            <typeparam name="TResult">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains a repeated <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.ReverseF``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            Inverts the order of the elements in a sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values to reverse.</param>
            <param name="forceClone">Force clone of <paramref name="source"/> (disable in-place optimization).</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> whose elements correspond to those of <paramref name="source"/> in reverse order.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SelectF``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> whose elements are the result of invoking <paramref name="selector"/> on each element of <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SelectF``2(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            Projects each element of a sequence into a new form by incorporating the element's index.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of <paramref name="source"/> element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> whose elements are the result of invoking <paramref name="selector"/> on each element of <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SelectInPlaceF``1(``0[],System.Func{``0,``0})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/> and the value returned by <paramref name="selector"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> whose elements are the result of invoking <paramref name="selector"/> on each element of <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SelectInPlaceF``1(``0[],System.Func{``0,System.Int32,``0})">
            <summary>
            Projects each element of a sequence into a new form by incorporating the element's index.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of <paramref name="source"/> element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/> and the value returned by <paramref name="selector"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> whose elements are the result of invoking <paramref name="selector"/> on each element of <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SelectManyF``2(System.Collections.Generic.IList{``0},System.Func{``0,System.Collections.Generic.IList{``1}})">
            <summary>
            Projects each element of sequence to a sequence and flattens the resulting sequences into one sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values to project.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> whose elements are the result of invoking the one-to-many <paramref name="selector"/> on each element of <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SelectManyF``2(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32,System.Collections.Generic.IList{``1}})">
            <summary>
            Projects each element of sequence to a sequence and flattens the resulting sequences into one sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values to project.</param>
            <param name="selector">A transform function to apply to each element; the second parameter of the function represents the index of <paramref name="source"/> element.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> whose elements are the result of invoking the one-to-many <paramref name="selector"/> on each element of <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SequenceEqualF``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether two sequences are equal by comparing their elements by using a specified equality comparer.
            </summary>
            <param name="first">An <see cref="T:System.Collections.Generic.IList`1"/> to compare to <paramref name="second"/>.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IList`1"/> to compare to <paramref name="first"/>.</param>
            <param name="comparer">An optional <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used to compare values; falls back to <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> when set to <see langword="null"/>.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="first"/> and <paramref name="second"/>.</typeparam>
            <returns><see langword="true"/> if the two input sequences are of equal length and their corresponding elements compare equal according to <paramref name="comparer"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SequenceCompareF``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Determines whether two sequences are equal by comparing their elements by using a specified comparer.
            </summary>
            <param name="first">An <see cref="T:System.Collections.Generic.IList`1"/> to compare to <paramref name="second"/>.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IList`1"/> to compare to <paramref name="first"/>.</param>
            <param name="comparer">An optional <see cref="T:System.Collections.Generic.IComparer`1"/> used to compare values; falls back to <see cref="P:System.Collections.Generic.Comparer`1.Default"/> when set to <see langword="null"/>.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="first"/> and <paramref name="second"/>.</typeparam>
            <returns>An array of <see cref="T:System.Int32"/>, where the value corresponds to <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/> indicating less than, greater than, or equals.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SingleF``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to return the single element of.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The single element of <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SingleF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to return a single element from.</param>
            <param name="predicate">A predicate function to test an element for a condition.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The single element of <paramref name="source"/> that satisfies a condition.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SingleOrDefaultF``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to return the single element of.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The single element of <paramref name="source"/>, or <see langword="default"/> if <paramref name="source"/> contains no elements.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SingleOrDefaultF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to return a single element from.</param>
            <param name="predicate">A predicate function to test an element for a condition.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The single element of <paramref name="source"/> that satisfies the condition, or <see langword="default"/> if no such element is found.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SkipF``1(System.Collections.Generic.IList{``0},System.Int32,System.Boolean)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to return elements from.</param>
            <param name="count">A number of elements to skip from <paramref name="source"/>.</param>
            <param name="forceClone">Force clone of <paramref name="source"/> (disable in-place optimization).</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains the elements that occur after the specified index in <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SkipLastF``1(System.Collections.Generic.IList{``0},System.Int32,System.Boolean)">
            <summary>
            Bypasses a specified number of end elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to return elements from.</param>
            <param name="count">A number of end elements to skip from <paramref name="source"/>.</param>
            <param name="forceClone">Force clone of <paramref name="source"/> (disable in-place optimization).</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains the elements that occur before the specified index in <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SkipWhileF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to return elements from.</param>
            <param name="predicate">A predicate function to test each element for a condition.</param>
            <param name="forceClone">Force clone of <paramref name="source"/> (disable in-place optimization).</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains the elements from <paramref name="source"/> starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SkipWhileF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32,System.Boolean},System.Boolean)">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to return elements from.</param>
            <param name="predicate">A predicate function to test each element for a condition; the second parameter of the function represents the index of <paramref name="source"/> element.</param>
            <param name="forceClone">Force clone of <paramref name="source"/> (disable in-place optimization).</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains the elements from <paramref name="source"/> starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SumF(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Computes the sum of a sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Int32"/> to calculate the sum of.</param>
            <returns>The sum of the values in the sequence.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SumF(System.Collections.Generic.IList{System.Int64})">
            <summary>
            Computes the sum of a sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Int64"/> to calculate the sum of.</param>
            <returns>The sum of the values in the sequence.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SumF(System.Collections.Generic.IList{System.Single})">
            <summary>
            Computes the sum of a sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Single"/> to calculate the sum of.</param>
            <returns>The sum of the values in the sequence.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SumF(System.Collections.Generic.IList{System.Double})">
            <summary>
            Computes the sum of a sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Double"/> to calculate the sum of.</param>
            <returns>The sum of the values in the sequence.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SumF(System.Collections.Generic.IList{System.Decimal})">
            <summary>
            Computes the sum of a sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Decimal"/> to calculate the sum of.</param>
            <returns>The sum of the values in the sequence.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SumF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes the sum of a sequence that is obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element which returns <see cref="T:System.Int32"/>.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The sum of the projected values.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SumF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the sum of a sequence that is obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element which returns <see cref="T:System.Int64"/>.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The sum of the projected values.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SumF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Single})">
            <summary>
            Computes the sum of a sequence that is obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element which returns <see cref="T:System.Single"/>.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The sum of the projected values.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SumF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the sum of a sequence that is obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element which returns <see cref="T:System.Double"/>.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The sum of the projected values.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.SumF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes the sum of a sequence that is obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element which returns <see cref="T:System.Decimal"/>.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>The sum of the projected values.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.TakeF``1(System.Collections.Generic.IList{``0},System.Int32,System.Boolean)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to return elements from.</param>
            <param name="count">A number of elements to return from <paramref name="source"/>.</param>
            <param name="forceClone">Force clone of <paramref name="source"/> (disable in-place optimization).</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains the specified number of elements from the start of <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.TakeLastF``1(System.Collections.Generic.IList{``0},System.Int32,System.Boolean)">
            <summary>
            Returns a specified number of contiguous elements from the end of a sequence.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to return elements from.</param>
            <param name="count">A number of end elements to return from <paramref name="source"/>.</param>
            <param name="forceClone">Force clone of <paramref name="source"/> (disable in-place optimization).</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains the specified number of elements from the end of <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.TakeWhileF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Returns elements from a sequence as long as a specified condition is true.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to return elements from.</param>
            <param name="predicate">A predicate function to test each element for a condition.</param>
            <param name="forceClone">Force clone of <paramref name="source"/> (disable in-place optimization).</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains the elements from <paramref name="source"/> that occur before the element at which the test no longer passes.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.TakeWhileF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32,System.Boolean},System.Boolean)">
            <summary>
            Returns elements from a sequence as long as a specified condition is true.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to return elements from.</param>
            <param name="predicate">A predicate function to test each element for a condition; the second parameter of the function represents the index of <paramref name="source"/> element.</param>
            <param name="forceClone">Force clone of <paramref name="source"/> (disable in-place optimization).</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains the elements from <paramref name="source"/> that occur before the element at which the test no longer passes.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.ToArrayF``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            Creates a <see cref="T:System.Array"/> from an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to create a <see cref="T:System.Array"/> from.</param>
            <param name="forceClone">Force clone of <paramref name="source"/> (disable in-place optimization).</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>A <see cref="T:System.Array"/> that contains the elements from <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.ToListF``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1"/> from an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to create a <see cref="T:System.Collections.Generic.List`1"/> from.</param>
            <param name="forceClone">Force clone of <paramref name="source"/> (disable in-place optimization).</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> that contains elements from <paramref name="source"/>.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.UnionF``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set union of two sequences.
            </summary>
            <param name="first">An <see cref="T:System.Collections.Generic.IList`1"/> whose distinct elements form the first set for the union.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IList`1"/> whose distinct elements form the second set for the union.</param>
            <param name="comparer">An optional <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used to compare values; falls back to <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> when set to <see langword="null"/>.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="first"/> and <paramref name="second"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains the elements from both input sequences, excluding duplicates.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.WhereF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to filter.</param>
            <param name="predicate">A predicate function to test each element for a condition.</param>
            <param name="forceClone">Force clone of <paramref name="source"/> (disable in-place optimization).</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains elements from <paramref name="source"/> that satisfy the condition.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.WhereF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32,System.Boolean},System.Boolean)">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to filter.</param>
            <param name="predicate">A predicate function to test each source element for a condition; the second parameter of the function represents the index of <paramref name="source"/> element.</param>
            <param name="forceClone">Force clone of <paramref name="source"/> (disable in-place optimization).</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains elements from <paramref name="source"/> that satisfy the condition.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.ZipF``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Produces a sequence of tuples with elements from the two specified sequences.
            </summary>
            <param name="first">The first <see cref="T:System.Collections.Generic.IList`1"/> to merge.</param>
            <param name="second">The second <see cref="T:System.Collections.Generic.IList`1"/> to merge.</param>
            <typeparam name="TFirst">The type of the elements of <paramref name="first"/>.</typeparam>
            <typeparam name="TSecond">The type of the elements of <paramref name="second"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of tuples with elements taken from <paramref name="first"/> and <paramref name="second"/>, in that order.</returns>
        </member>
        <member name="M:LinqFasterer.EnumerableF.ZipF``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Func{``0,``1,``2})">
            <summary>
            Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.
            </summary>
            <param name="first">The first <see cref="T:System.Collections.Generic.IList`1"/> to merge.</param>
            <param name="second">The second <see cref="T:System.Collections.Generic.IList`1"/> to merge.</param>
            <param name="resultSelector">A selector function that specifies how to merge the elements from the two input sequences.</param>
            <typeparam name="TFirst">The type of the elements of <paramref name="first"/>.</typeparam>
            <typeparam name="TSecond">The type of the elements of <paramref name="second"/>.</typeparam>
            <typeparam name="TResult">The type returned by <paramref name="resultSelector"/>.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains merged elements of the two input sequences using <paramref name="resultSelector"/>.</returns>
        </member>
    </members>
</doc>
