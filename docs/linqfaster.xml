<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinqFasterer</name>
    </assembly>
    <members>
        <member name="T:LinqFasterer.LinqFasterer">
            <summary>
            TODO:
            </summary>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.AggregateF``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,``0})">
            <summary>Applies an accumulator function over a sequence.</summary>
            <returns>The final accumulator value.</returns>
            <param name="source">A sequence to aggregate over.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.AggregateF``2(System.Collections.Generic.IList{``0},``1,System.Func{``1,``0,``1})">
            <summary>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</summary>
            <returns>The final accumulator value.</returns>
            <param name="source">A sequence to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.AggregateF``3(System.Collections.Generic.IList{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
            <summary>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</summary>
            <returns>The transformed final accumulator value.</returns>
            <param name="source">A sequence to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.AllF``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>Determines whether all elements of a sequence satisfy a condition.</summary>
            <returns>true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.</returns>
            <param name="source">An array that contains the elements to apply the predicate to.</param>
            <param name="predicate">A function to test each element for a condition.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.AnyF``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>Determines whether any element of a sequence satisfies a condition.</summary>
            <returns>true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.</returns>
            <param name="source">A sequence whose elements to apply the predicate to.</param>
            <param name="predicate">A function to test each element for a condition.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.AppendF``1(System.Collections.Generic.IList{``0},``0)">
            <summary>Appends a value to the end of the sequence.</summary>
            <returns>A new sequence that ends with element.</returns>
            <param name="source">A sequence of values.</param>
            <param name="element">The value to append to a sequence.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.AverageF(System.Collections.Generic.IList{System.Int32})">
            <summary>Computes the average of a sequence.</summary>
            <returns>The average of the sequence of values.</returns>
            <param name="source">A sequence to calculate the average of.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.AverageF(System.Collections.Generic.IList{System.Int64})">
            <summary>Computes the average of a sequence.</summary>
            <returns>The average of the sequence of values.</returns>
            <param name="source">A sequence to calculate the average of.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.AverageF(System.Collections.Generic.IList{System.Single})">
            <summary>Computes the average of a sequence.</summary>
            <returns>The average of the sequence of values.</returns>
            <param name="source">A sequence to calculate the average of.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.AverageF(System.Collections.Generic.IList{System.Double})">
            <summary>Computes the average of a sequence.</summary>
            <returns>The average of the sequence of values.</returns>
            <param name="source">A sequence to calculate the average of.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.AverageF(System.Collections.Generic.IList{System.Decimal})">
            <summary>Computes the average of a sequence.</summary>
            <returns>The average of the sequence of values.</returns>
            <param name="source">A sequence to calculate the average of.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.AverageF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32})">
            <summary>Computes the average of a sequence that is obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The average of the sequence of values.</returns>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.AverageF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int64})">
            <summary>Computes the average of a sequence that is obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The average of the sequence of values.</returns>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.AverageF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Single})">
            <summary>Computes the average of a sequence that is obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The average of the sequence of values.</returns>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.AverageF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Double})">
            <summary>Computes the average of a sequence that is obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The average of the sequence of values.</returns>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.AverageF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Decimal})">
            <summary>Computes the average of a sequence that is obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The average of the sequence of values.</returns>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.ConcatF``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>Concatenates two sequences.</summary>
            <returns>A sequence that contains the concatenated elements of the two input sequences.</returns>
            <param name="first">The first sequence to concatenate.</param>
            <param name="second">The sequence to concatenate to the first sequence.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.ContainsF``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Determines whether a sequence contains a specified element by using a specified equality comparer.</summary>
            <returns>true if the source sequence contains an element that has the specified value; otherwise, false.</returns>
            <param name="source">A sequence in which to locate a value.</param>
            <param name="value">The value to locate in the sequence.</param>
            <param name="comparer">An equality comparer to compare values.</param>]
        </member>
        <member name="M:LinqFasterer.LinqFasterer.CountF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>Returns a number that represents how many elements in the specified sequence satisfy a condition.</summary>
            <returns>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</returns>
            <param name="source">A sequence that contains elements to be tested and counted.</param>
            <param name="predicate">A function to test each element for a condition.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.DefaultIfEmptyF``1(System.Collections.Generic.IList{``0},``0)">
            <summary>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</summary>
            <returns>A sequence that contains defaultValue if source is empty; otherwise, source.</returns>
            <param name="source">The sequence to return the specified value for if it is empty.</param>
            <param name="defaultValue">The value to return if the sequence is empty.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.DistinctF``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>Returns distinct elements from a sequence by using a specified equality comparer to compare values.</summary>
            <returns>A sequence that contains distinct elements from the source sequence.</returns>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <param name="forceClone">Force clone of an object (disable in-place optimization).</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.ElementAtF``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>Returns the element at a specified index in a sequence.</summary>
            <returns>The element at the specified position in the source sequence.</returns>
            <param name="source">A sequence to return an element from.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.ElementAtOrDefaultF``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>Returns the element at a specified index in a sequence.</summary>
            <returns>The element at the specified position in the source sequence.</returns>
            <param name="source">A sequence to return an element from.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.EmptyF``1">
            <summary>Returns an empty sequence that has the specified type argument.</summary>
            <returns>An empty sequence.</returns>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.ExceptF``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>Produces the set difference of two sequences by using the specified equality comparer to compare values.</summary>
            <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
            <param name="first">A sequence whose elements that are not also in second will be returned.</param>
            <param name="second">A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <param name="forceClone">Force clone of an object (disable in-place optimization).</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.FirstF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>Returns the first element in a sequence that satisfies a specified condition.</summary>
            <returns>The first element in the sequence that passes the test in the specified predicate function.</returns>
            <param name="source">A sequence to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.FirstOrDefaultF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
            <returns>The first element in the sequence that passes the test in the specified predicate function.</returns>
            <param name="source">A sequence to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.IntersectF``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>Produces the set intersection of two sequences by using the default equality comparer to compare values.</summary>
            <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
            <param name="first">A sequence whose distinct elements that also appear in the second sequence will be returned.</param>
            <param name="second">A sequence whose distinct elements that also appear in the first sequence will be returned.</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <param name="forceClone">Force clone of an object (disable in-place optimization).</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.LastF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>Returns the last element in a sequence that satisfies a specified condition.</summary>
            <returns>The last element in the sequence that passes the test in the specified predicate function.</returns>
            <param name="source">A sequence to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.LastOrDefaultF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>Returns the last element of a sequence, or a default value if the sequence contains no elements.</summary>
            <returns>The last element in the sequence that passes the test in the specified predicate function.</returns>
            <param name="source">A sequence to return an element from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.MaxF``1(System.Collections.Generic.IList{``0})">
            <summary>Returns the maximum value in a generic sequence.</summary>
            <returns>The maximum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the maximum value of.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.MaxF``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</summary>
            <returns>The maximum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.MinF``1(System.Collections.Generic.IList{``0})">
            <summary>Returns the minimum value in a generic sequence.</summary>
            <returns>The minimum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the minimum value of.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.MinF``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</summary>
            <returns>The minimum value in the sequence.</returns>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.OrderByF``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Boolean)">
            <summary>Sorts the elements of a sequence in ascending order by using a specified comparer.</summary>
            <returns>A sequence whose elements are sorted according to a key.</returns>
            <param name="source">A sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">A comparer to compare keys.</param>
            <param name="forceClone">Force clone of an object (disable in-place optimization).</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.OrderByDescendingF``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Boolean)">
            <summary>Sorts the elements of a sequence in descending order by using a specified comparer.</summary>
            <returns>A sequence whose elements are sorted in descending order according to a key.</returns>
            <param name="source">A sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">A comparer to compare keys.</param>
            <param name="forceClone">Force clone of an object (disable in-place optimization).</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.PrependF``1(System.Collections.Generic.IList{``0},``0)">
            <summary>Adds a value to the beginning of the sequence.</summary>
            <returns>A new sequence that begins with element.</returns>
            <param name="source">A sequence of values.</param>
            <param name="element">The value to prepend to source.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.RangeF(System.Int32,System.Int32,System.Int32)">
            <summary>Generates a sequence of numbers within a specified range.</summary>
            <returns>A sequence that contains a range of sequential numbers.</returns>
            <param name="start">The value of the first number in the sequence.</param>
            <param name="count">The number of sequential numbers to generate.</param>
            <param name="change">The value change between individual elements of a sequence.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.RangeF(System.Int64,System.Int32,System.Int64)">
            <summary>Generates a sequence of numbers within a specified range.</summary>
            <returns>A sequence that contains a range of sequential numbers.</returns>
            <param name="start">The value of the first number in the sequence.</param>
            <param name="count">The number of sequential numbers to generate.</param>
            <param name="change">The value change between individual elements of a sequence.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.RangeF(System.Single,System.Int32,System.Single)">
            <summary>Generates a sequence of numbers within a specified range.</summary>
            <returns>A sequence that contains a range of sequential numbers.</returns>
            <param name="start">The value of the first number in the sequence.</param>
            <param name="count">The number of sequential numbers to generate.</param>
            <param name="change">The value change between individual elements of a sequence.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.RangeF(System.Double,System.Int32,System.Double)">
            <summary>Generates a sequence of numbers within a specified range.</summary>
            <returns>A sequence that contains a range of sequential numbers.</returns>
            <param name="start">The value of the first number in the sequence.</param>
            <param name="count">The number of sequential numbers to generate.</param>
            <param name="change">The value change between individual elements of a sequence.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.RangeF(System.Decimal,System.Int32,System.Decimal)">
            <summary>Generates a sequence of numbers within a specified range.</summary>
            <returns>A sequence that contains a range of sequential numbers.</returns>
            <param name="start">The value of the first number in the sequence.</param>
            <param name="count">The number of sequential numbers to generate.</param>
            <param name="change">The value change between individual elements of a sequence.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.RepeatF``1(``0,System.Int32)">
            <summary>Generates a sequence that contains one repeated value.</summary>
            <returns>A sequence that contains a repeated value.</returns>
            <param name="element">The value to be repeated.</param>
            <param name="count">The number of times to repeat the value in the generated sequence.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.ReverseF``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>Inverts the order of the elements in a sequence.</summary>
            <returns>A sequence whose elements correspond to those of the input sequence in reverse order.</returns>
            <param name="source">A sequence of values to reverse.</param>
            <param name="forceClone">Force clone of an object (disable in-place optimization).</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SelectF``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>Projects each element of a sequence into a new form.</summary>
            <returns>A sequence whose elements are the result of invoking the transform function on each element of source.</returns>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SelectF``2(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32,``1})">
            <summary>Projects each element of a sequence into a new form by incorporating the element's index.</summary>
            <returns>A sequence whose elements are the result of invoking the transform function on each element of source.</returns>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SelectInPlaceF``1(``0[],System.Func{``0,``0})">
            <summary>Projects each element of a sequence into a new form.</summary>
            <returns>A sequence whose elements are the result of invoking the transform function on each element of source.</returns>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SelectInPlaceF``1(``0[],System.Func{``0,System.Int32,``0})">
            <summary>Projects each element of a sequence into a new form by incorporating the element's index.</summary>
            <returns>A sequence whose elements are the result of invoking the transform function on each element of source.</returns>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SelectManyF``2(System.Collections.Generic.IList{``0},System.Func{``0,System.Collections.Generic.IList{``1}})">
            <summary>Projects each element of a sequence to a sequence and flattens the resulting sequences into one sequence.</summary>
            <returns>A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
            <param name="source">A sequence of values to project.</param>
            <param name="selector">A transform function to apply to each element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SelectManyF``2(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32,System.Collections.Generic.IList{``1}})">
            <summary>Projects each element of a sequence to A sequence and flattens the resulting sequences into one sequence.</summary>
            <returns>A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
            <param name="source">A sequence of values to project.</param>
            <param name="selector">A transform function to apply to each element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SequenceEqualF``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Determines whether two sequences are equal by comparing their elements by using a specified equality comparer.</summary>
            <returns>true if the two source sequences are of equal length and their corresponding elements compare equal according to comparer; otherwise, false.</returns>
            <param name="first">A sequence to compare to second.</param>
            <param name="second">A sequence to compare to the first sequence.</param>
            <param name="comparer">An equality comparer to use to compare elements.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SequenceCompareF``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>Determines whether two sequences are equal by comparing their elements by using a specified comparer.</summary>
            <returns>An array of integers, where the value corresponds to IComparer.Compare indicating less than, greater than, or equals.</returns>
            <param name="first">A sequence to compare to second.</param>
            <param name="second">A sequence to compare to the first sequence.</param>
            <param name="comparer">A comparer to use to compare elements.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SingleF``1(System.Collections.Generic.IList{``0})">
            <summary>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</summary>
            <returns>The single element of the input sequence.</returns>
            <param name="source">A sequence to return the single element of.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SingleF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</summary>
            <returns>The single element of the input sequence that satisfies a condition.</returns>
            <param name="source">A sequence to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SingleOrDefaultF``1(System.Collections.Generic.IList{``0})">
            <summary>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</summary>
            <returns>The single element of the input sequence, or default if the sequence contains no elements.</returns>
            <param name="source">A sequence to return the single element of.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SingleOrDefaultF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
            <returns>The single element of the input sequence that satisfies the condition, or default if no such element is found.</returns>
            <param name="source">A sequence to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SkipF``1(System.Collections.Generic.IList{``0},System.Int32,System.Boolean)">
            <summary>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</summary>
            <returns>A sequence that contains the elements that occur after the specified index in the input sequence.</returns>
            <param name="source">A sequence to return elements from.</param>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <param name="forceClone">Force clone of an object (disable in-place optimization).</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SkipLastF``1(System.Collections.Generic.IList{``0},System.Int32,System.Boolean)">
            <summary>Bypasses a specified number of last elements in a sequence and then returns the remaining elements.</summary>
            <returns>A sequence that contains the elements that occur before the specified index in the input sequence.</returns>
            <param name="source">A sequence to return elements from.</param>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <param name="forceClone">Force clone of an object (disable in-place optimization).</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SkipWhileF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</summary>
            <returns>A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
            <param name="source">A sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="forceClone">Force clone of an object (disable in-place optimization).</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SkipWhileF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32,System.Boolean},System.Boolean)">
            <summary>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</summary>
            <returns>A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
            <param name="source">A sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="forceClone">Force clone of an object (disable in-place optimization).</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SumF(System.Collections.Generic.IList{System.Int32})">
            <summary>Computes the sum of a sequence.</summary>
            <returns>The sum of the values in the sequence.</returns>
            <param name="source">A sequence to calculate the sum of.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SumF(System.Collections.Generic.IList{System.Int64})">
            <summary>Computes the sum of a sequence.</summary>
            <returns>The sum of the values in the sequence.</returns>
            <param name="source">A sequence to calculate the sum of.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SumF(System.Collections.Generic.IList{System.Single})">
            <summary>Computes the sum of a sequence.</summary>
            <returns>The sum of the values in the sequence.</returns>
            <param name="source">A sequence to calculate the sum of.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SumF(System.Collections.Generic.IList{System.Double})">
            <summary>Computes the sum of a sequence.</summary>
            <returns>The sum of the values in the sequence.</returns>
            <param name="source">A sequence to calculate the sum of.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SumF(System.Collections.Generic.IList{System.Decimal})">
            <summary>Computes the sum of a sequence.</summary>
            <returns>The sum of the values in the sequence.</returns>
            <param name="source">A sequence to calculate the sum of.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SumF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32})">
            <summary>Computes the sum of a sequence that is obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The sum of the projected values.</returns>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SumF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int64})">
            <summary>Computes the sum of a sequence that is obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The sum of the projected values.</returns>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SumF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Single})">
            <summary>Computes the sum of a sequence that is obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The sum of the projected values.</returns>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SumF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Double})">
            <summary>Computes the sum of a sequence that is obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The sum of the projected values.</returns>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.SumF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Decimal})">
            <summary>Computes the sum of a sequence that is obtained by invoking a transform function on each element of the input sequence.</summary>
            <returns>The sum of the projected values.</returns>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.TakeF``1(System.Collections.Generic.IList{``0},System.Int32,System.Boolean)">
            <summary>Returns a specified number of contiguous elements from the start of a sequence.</summary>
            <returns>A sequence that contains the specified number of elements from the start of the input sequence.</returns>
            <param name="source">The sequence to return elements from.</param>
            <param name="count">The number of elements to return.</param>
            <param name="forceClone">Force clone of an object (disable in-place optimization).</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.TakeLastF``1(System.Collections.Generic.IList{``0},System.Int32,System.Boolean)">
            <summary>Returns a specified number of contiguous elements from the end of a sequence.</summary>
            <returns>A sequence that contains the specified number of elements from the end of the input sequence.</returns>
            <param name="source">The sequence to return elements from.</param>
            <param name="count">The number of elements to return.</param>
            <param name="forceClone">Force clone of an object (disable in-place optimization).</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.TakeWhileF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>Returns elements from a sequence as long as a specified condition is true.</summary>
            <returns>A sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
            <param name="source">A sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="forceClone">Force clone of an object (disable in-place optimization).</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.TakeWhileF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32,System.Boolean},System.Boolean)">
            <summary>Returns elements from a sequence as long as a specified condition is true.</summary>
            <returns>A sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
            <param name="source">A sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="forceClone">Force clone of an object (disable in-place optimization).</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.ToArrayF``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>Creates an array from a sequence.</summary>
            <returns>An array that contains the elements from the input sequence.</returns>
            <param name="source">A sequence to create an array from.</param>
            <param name="forceClone">Force clone of an object (disable in-place optimization).</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.ToListF``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>Creates a list from a sequence.</summary>
            <returns>A sequence that contains elements from the input sequence.</returns>
            <param name="source">A sequence to create a list from.</param>
            <param name="forceClone">Force clone of an object (disable in-place optimization).</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.UnionF``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Produces the set union of two sequences.</summary>
            <returns>A sequence that contains the elements from both input sequences, excluding duplicates.</returns>
            <param name="first">A sequence whose distinct elements form the first set for the union.</param>
            <param name="second">A sequence whose distinct elements form the second set for the union.</param>
            <param name="comparer">An optional equality comparer, falls back to default when set to null.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.WhereF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>Filters a sequence of values based on a predicate.</summary>
            <returns>A sequence that contains elements from the input sequence that satisfy the condition.</returns>
            <param name="source">A sequence to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="forceClone">Force clone of an object (disable in-place optimization).</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.WhereF``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32,System.Boolean},System.Boolean)">
            <summary>Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.</summary>
            <returns>A sequence that contains elements from the input sequence that satisfy the condition.</returns>
            <param name="source">A sequence to filter.</param>
            <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
            <param name="forceClone">Force clone of an object (disable in-place optimization).</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.ZipF``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>Produces a sequence of tuples with elements from the two specified sequences.</summary>
            <returns>A sequence of tuples with elements taken from the first and second sequences, in that order.</returns>
            <param name="first">The first sequence to merge.</param>
            <param name="second">The second sequence to merge.</param>
        </member>
        <member name="M:LinqFasterer.LinqFasterer.ZipF``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Func{``0,``1,``2})">
            <summary>Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.</summary>
            <returns>A sequence that contains merged elements of two input sequences.</returns>
            <param name="first">The first sequence to merge.</param>
            <param name="second">The second sequence to merge.</param>
            <param name="resultSelector">A function that specifies how to merge the elements from the two sequences.</param>
        </member>
    </members>
</doc>
